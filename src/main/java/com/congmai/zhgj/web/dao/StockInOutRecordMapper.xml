<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.congmai.zhgj.web.dao.StockInOutRecordMapper" >
  <resultMap id="BaseResultMap" type="com.congmai.zhgj.web.model.StockInOutRecord" >
    <id column="serialNum" property="serialNum" jdbcType="VARCHAR" />
    <result column="deliverSerial" property="deliverSerial" jdbcType="VARCHAR" />
    <result column="takeDeliverSerial" property="takeDeliverSerial" jdbcType="VARCHAR" />
     <result column="docNum" property="docNum" jdbcType="VARCHAR" />
    <result column="inOutNum" property="inOutNum" jdbcType="VARCHAR" />
    <result column="stockDate" property="stockDate" jdbcType="DATE" />
    <result column="operator" property="operator" jdbcType="VARCHAR" />
    <result column="contactNum" property="contactNum" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="VARCHAR" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="delFlg" property="delFlg" jdbcType="VARCHAR" />
    <result column="creator" property="creator" jdbcType="VARCHAR" />
    <result column="createTime" property="createTime" jdbcType="TIMESTAMP" />
    <result column="updater" property="updater" jdbcType="VARCHAR" />
    <result column="updateTime" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="shipperOrReceiver" property="shipperOrReceiver" jdbcType="VARCHAR" />
    <result column="inOutFlag" property="inOutFlag" jdbcType="VARCHAR" />
  </resultMap>
  <!-- 入库查询 -->
  <resultMap id="BaseResultMap2" type="com.congmai.zhgj.web.model.StockInOutRecord" >
    <id column="serialNum" property="serialNum" jdbcType="VARCHAR" />
    <result column="deliverSerial" property="deliverSerial" jdbcType="VARCHAR" />
    <result column="takeDeliverSerial" property="takeDeliverSerial" jdbcType="VARCHAR" />
     <result column="docNum" property="docNum" jdbcType="VARCHAR" />
    <result column="inOutNum" property="inOutNum" jdbcType="VARCHAR" />
    <result column="stockDate" property="stockDate" jdbcType="DATE" />
    <result column="operator" property="operator" jdbcType="VARCHAR" />
    <result column="contactNum" property="contactNum" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="VARCHAR" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="delFlg" property="delFlg" jdbcType="VARCHAR" />
    <result column="creator" property="creator" jdbcType="VARCHAR" />
    <result column="createTime" property="createTime" jdbcType="TIMESTAMP" />
    <result column="updater" property="updater" jdbcType="VARCHAR" />
    <result column="updateTime" property="updateTime" jdbcType="TIMESTAMP" />
     <result column="inOutType" property="inOutType" jdbcType="VARCHAR" />
    <result column="shipperOrReceiver" property="shipperOrReceiver" jdbcType="VARCHAR" />
    <result column="inOutFlag" property="inOutFlag" jdbcType="VARCHAR" />
    <association column="shipperOrReceiver" property="shipperOrReceiverName" select="com.congmai.zhgj.web.dao.CompanyMapper.selectComNameByPrimaryKey"  />
    <association property="delivery" column="takeDeliverSerial" select="com.congmai.zhgj.web.dao.TakeDeliveryMapper.selectByTakeDeliveryPrimaryKeyForStockIn"></association>
  	<association property="warehouseCount" column="takeDeliverSerial" select="com.congmai.zhgj.web.dao.Delivery2Mapper.countWarehouseByDeliverSerial" ></association>
    <association property="positionCount" column="takeDeliverSerial" select="com.congmai.zhgj.web.dao.Delivery2Mapper.countPositionByDeliverSerial" ></association>
  </resultMap>
  <!-- 出库查询 -->
  <resultMap id="BaseResultMap3" type="com.congmai.zhgj.web.model.StockInOutRecord" >
    <id column="serialNum" property="serialNum" jdbcType="VARCHAR" />
    <result column="deliverSerial" property="deliverSerial" jdbcType="VARCHAR" />
    <result column="takeDeliverSerial" property="takeDeliverSerial" jdbcType="VARCHAR" />
     <result column="docNum" property="docNum" jdbcType="VARCHAR" />
    <result column="inOutNum" property="inOutNum" jdbcType="VARCHAR" />
    <result column="stockDate" property="stockDate" jdbcType="DATE" />
    <result column="operator" property="operator" jdbcType="VARCHAR" />
    <result column="contactNum" property="contactNum" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="VARCHAR" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="delFlg" property="delFlg" jdbcType="VARCHAR" />
    <result column="creator" property="creator" jdbcType="VARCHAR" />
    <result column="createTime" property="createTime" jdbcType="TIMESTAMP" />
    <result column="updater" property="updater" jdbcType="VARCHAR" />
    <result column="updateTime" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="inOutType" property="inOutType" jdbcType="VARCHAR" />
    <result column="inOutFlag" property="inOutFlag" jdbcType="VARCHAR" />
    <result column="shipperOrReceiver" property="shipperOrReceiver" jdbcType="VARCHAR" />
    <association column="shipperOrReceiver" property="shipperOrReceiverName" select="com.congmai.zhgj.web.dao.CompanyMapper.selectComNameByPrimaryKey"  />
    <association property="delivery" column="deliverSerial" select="com.congmai.zhgj.web.dao.Delivery2Mapper.selectByDeliveryPrimaryKey"></association>
  	<association property="warehouseCount" column="takeDeliverSerial" select="com.congmai.zhgj.web.dao.Delivery2Mapper.countWarehouseByDeliverSerial" ></association>
    <association property="positionCount" column="takeDeliverSerial" select="com.congmai.zhgj.web.dao.Delivery2Mapper.countPositionByDeliverSerial" ></association>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
    <sql id="Base_Column_List" >
   	serialNum, deliverSerial, takeDeliverSerial, docNum, inOutNum, stockDate, operator, 
    contactNum, status, remark, delFlg, creator, createTime, updater, updateTime, inOutType, 
    shipperOrReceiver,inOutFlag
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.congmai.zhgj.web.model.StockInOutRecordExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from stockInOutRecord
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from stockInOutRecord
    where serialNum = #{serialNum,jdbcType=VARCHAR}
  </select>
  <select id="selectStockInInfoByPrimaryKey" resultMap="BaseResultMap2" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from stockInOutRecord
    where serialNum = #{serialNum,jdbcType=VARCHAR}
  </select>
  <select id="selectStockOutInfoByPrimaryKey" resultMap="BaseResultMap3" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from stockInOutRecord
    where serialNum = #{serialNum,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from stockInOutRecord
    where serialNum = #{serialNum,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.congmai.zhgj.web.model.StockInOutRecordExample" >
    delete from stockInOutRecord
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.congmai.zhgj.web.model.StockInOutRecord" >
    insert into stockInOutRecord (serialNum, deliverSerial, takeDeliverSerial, 
      docNum, inOutNum, stockDate, 
      operator, contactNum, status, 
      remark, delFlg, creator, 
      createTime, updater, updateTime, 
      inOutType, shipperOrReceiver, inOutFlag
      )
    values (#{serialNum,jdbcType=VARCHAR}, #{deliverSerial,jdbcType=VARCHAR}, #{takeDeliverSerial,jdbcType=VARCHAR}, 
      #{docNum,jdbcType=VARCHAR}, #{inOutNum,jdbcType=VARCHAR}, #{stockDate,jdbcType=DATE}, 
      #{operator,jdbcType=VARCHAR}, #{contactNum,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR}, 
      #{remark,jdbcType=VARCHAR}, #{delFlg,jdbcType=VARCHAR}, #{creator,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updater,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{inOutType,jdbcType=VARCHAR}, #{shipperOrReceiver,jdbcType=VARCHAR}, #{inOutFlag,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.congmai.zhgj.web.model.StockInOutRecord" >
    insert into stockInOutRecord
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="serialNum != null" >
        serialNum,
      </if>
      <if test="deliverSerial != null" >
        deliverSerial,
      </if>
      <if test="takeDeliverSerial != null" >
        takeDeliverSerial,
      </if>
      <if test="docNum != null" >
        docNum,
      </if>
      <if test="inOutNum != null" >
        inOutNum,
      </if>
      <if test="stockDate != null" >
        stockDate,
      </if>
      <if test="operator != null" >
        operator,
      </if>
      <if test="contactNum != null" >
        contactNum,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="delFlg != null" >
        delFlg,
      </if>
      <if test="creator != null" >
        creator,
      </if>
      <if test="createTime != null" >
        createTime,
      </if>
      <if test="updater != null" >
        updater,
      </if>
      <if test="updateTime != null" >
        updateTime,
      </if>
      <if test="inOutType != null" >
        inOutType,
      </if>
      <if test="shipperOrReceiver != null" >
        shipperOrReceiver,
      </if>
      <if test="inOutFlag != null" >
        inOutFlag,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="serialNum != null" >
        #{serialNum,jdbcType=VARCHAR},
      </if>
      <if test="deliverSerial != null" >
        #{deliverSerial,jdbcType=VARCHAR},
      </if>
      <if test="takeDeliverSerial != null" >
        #{takeDeliverSerial,jdbcType=VARCHAR},
      </if>
      <if test="docNum != null" >
        #{docNum,jdbcType=VARCHAR},
      </if>
      <if test="inOutNum != null" >
        #{inOutNum,jdbcType=VARCHAR},
      </if>
      <if test="stockDate != null" >
        #{stockDate,jdbcType=DATE},
      </if>
      <if test="operator != null" >
        #{operator,jdbcType=VARCHAR},
      </if>
      <if test="contactNum != null" >
        #{contactNum,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="delFlg != null" >
        #{delFlg,jdbcType=VARCHAR},
      </if>
      <if test="creator != null" >
        #{creator,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updater != null" >
        #{updater,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="inOutType != null" >
        #{inOutType,jdbcType=VARCHAR},
      </if>
      <if test="shipperOrReceiver != null" >
        #{shipperOrReceiver,jdbcType=VARCHAR},
      </if>
      <if test="inOutFlag != null" >
        #{inOutFlag,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.congmai.zhgj.web.model.StockInOutRecordExample" resultType="java.lang.Integer" >
    select count(*) from stockInOutRecord
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update stockInOutRecord
    <set >
      <if test="record.serialNum != null" >
        serialNum = #{record.serialNum,jdbcType=VARCHAR},
      </if>
      <if test="record.deliverSerial != null" >
        deliverSerial = #{record.deliverSerial,jdbcType=VARCHAR},
      </if>
      <if test="record.takeDeliverSerial != null" >
        takeDeliverSerial = #{record.takeDeliverSerial,jdbcType=VARCHAR},
      </if>
      <if test="record.docNum != null" >
        docNum = #{record.docNum,jdbcType=VARCHAR},
      </if>
      <if test="record.inOutNum != null" >
        inOutNum = #{record.inOutNum,jdbcType=VARCHAR},
      </if>
      <if test="record.stockDate != null" >
        stockDate = #{record.stockDate,jdbcType=DATE},
      </if>
      <if test="record.operator != null" >
        operator = #{record.operator,jdbcType=VARCHAR},
      </if>
      <if test="record.contactNum != null" >
        contactNum = #{record.contactNum,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=VARCHAR},
      </if>
      <if test="record.remark != null" >
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.delFlg != null" >
        delFlg = #{record.delFlg,jdbcType=VARCHAR},
      </if>
      <if test="record.creator != null" >
        creator = #{record.creator,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null" >
        createTime = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updater != null" >
        updater = #{record.updater,jdbcType=VARCHAR},
      </if>
      <if test="record.updateTime != null" >
        updateTime = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.inOutType != null" >
        inOutType = #{record.inOutType,jdbcType=VARCHAR},
      </if>
      <if test="record.shipperOrReceiver != null" >
        shipperOrReceiver = #{record.shipperOrReceiver,jdbcType=VARCHAR},
      </if>
      <if test="record.inOutFlag != null" >
        inOutFlag = #{record.inOutFlag,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update stockInOutRecord
    set serialNum = #{record.serialNum,jdbcType=VARCHAR},
      deliverSerial = #{record.deliverSerial,jdbcType=VARCHAR},
      takeDeliverSerial = #{record.takeDeliverSerial,jdbcType=VARCHAR},
      docNum = #{record.docNum,jdbcType=VARCHAR},
      inOutNum = #{record.inOutNum,jdbcType=VARCHAR},
      stockDate = #{record.stockDate,jdbcType=DATE},
      operator = #{record.operator,jdbcType=VARCHAR},
      contactNum = #{record.contactNum,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=VARCHAR},
      remark = #{record.remark,jdbcType=VARCHAR},
      delFlg = #{record.delFlg,jdbcType=VARCHAR},
      creator = #{record.creator,jdbcType=VARCHAR},
      createTime = #{record.createTime,jdbcType=TIMESTAMP},
      updater = #{record.updater,jdbcType=VARCHAR},
      updateTime = #{record.updateTime,jdbcType=TIMESTAMP},
      inOutType = #{record.inOutType,jdbcType=VARCHAR},
      shipperOrReceiver = #{record.shipperOrReceiver,jdbcType=VARCHAR},
      inOutFlag = #{record.inOutFlag,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.congmai.zhgj.web.model.StockInOutRecord" >
    update stockInOutRecord
    <set >
      <if test="deliverSerial != null" >
        deliverSerial = #{deliverSerial,jdbcType=VARCHAR},
      </if>
      <if test="takeDeliverSerial != null" >
        takeDeliverSerial = #{takeDeliverSerial,jdbcType=VARCHAR},
      </if>
      <if test="docNum != null" >
        docNum = #{docNum,jdbcType=VARCHAR},
      </if>
      <if test="inOutNum != null" >
        inOutNum = #{inOutNum,jdbcType=VARCHAR},
      </if>
      <if test="stockDate != null" >
        stockDate = #{stockDate,jdbcType=DATE},
      </if>
      <if test="operator != null" >
        operator = #{operator,jdbcType=VARCHAR},
      </if>
      <if test="contactNum != null" >
        contactNum = #{contactNum,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="delFlg != null" >
        delFlg = #{delFlg,jdbcType=VARCHAR},
      </if>
      <if test="creator != null" >
        creator = #{creator,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        createTime = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updater != null" >
        updater = #{updater,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null" >
        updateTime = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="inOutType != null" >
        inOutType = #{inOutType,jdbcType=VARCHAR},
      </if>
      <if test="shipperOrReceiver != null" >
        shipperOrReceiver = #{shipperOrReceiver,jdbcType=VARCHAR},
      </if>
      <if test="inOutFlag != null" >
        inOutFlag = #{inOutFlag,jdbcType=VARCHAR},
      </if>
    </set>
    where serialNum = #{serialNum,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.congmai.zhgj.web.model.StockInOutRecord" >
    update stockInOutRecord
    set deliverSerial = #{deliverSerial,jdbcType=VARCHAR},
      takeDeliverSerial = #{takeDeliverSerial,jdbcType=VARCHAR},
      docNum = #{docNum,jdbcType=VARCHAR},
      inOutNum = #{inOutNum,jdbcType=VARCHAR},
      stockDate = #{stockDate,jdbcType=DATE},
      operator = #{operator,jdbcType=VARCHAR},
      contactNum = #{contactNum,jdbcType=VARCHAR},
      status = #{status,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=VARCHAR},
      delFlg = #{delFlg,jdbcType=VARCHAR},
      creator = #{creator,jdbcType=VARCHAR},
      createTime = #{createTime,jdbcType=TIMESTAMP},
      updater = #{updater,jdbcType=VARCHAR},
      updateTime = #{updateTime,jdbcType=TIMESTAMP},
      inOutType = #{inOutType,jdbcType=VARCHAR},
      shipperOrReceiver = #{shipperOrReceiver,jdbcType=VARCHAR},
      inOutFlag = #{inOutFlag,jdbcType=VARCHAR}
    where serialNum = #{serialNum,jdbcType=VARCHAR}
  </update>
  <update id="deleteStockInOutRecord" parameterType="java.util.List">
    	update  stockInOutRecord   set delFlg=1  where serialNum in
        <foreach item="idList" collection="list" open="(" close=")" separator=",">
            #{idList}
        </foreach>
    </update>
    <!--获取库存所在仓库数  -->
    <select id="getBelongWarehouseNum"  parameterType="java.lang.String"   resultType="java.lang.String">
	select COUNT(DISTINCT warehouseSerial ) from deliveryMateriel where
	deliveryMateriel.orderMaterielSerial in(select serialNum from
	orderMateriel where materielSerial= #{serialNum,jdbcType=VARCHAR})
    </select>
    <!--获取库存关联采购单数  -->
    <select id="countBuyNum" parameterType="java.lang.String"   resultType="java.lang.String">
    select COUNT(o.serialNum ) from orderInfo o where
	exists  (select  DISTINCT om.orderSerial from
	orderMateriel  om  where om.materielSerial= #{serialNum,jdbcType=VARCHAR} and o.serialNum=om.orderSerial )
	and o.buyComId IS NULL
    </select>
    <!--获取库存关联销售单数  -->
    <select id="countSaleNum" parameterType="java.lang.String"   resultType="java.lang.String">
      select COUNT(o.serialNum ) from orderInfo o where
	exists (select  DISTINCT om.orderSerial from
	orderMateriel  om  where om.materielSerial= #{serialNum,jdbcType=VARCHAR}and o.serialNum=om.orderSerial)
	and o.supplyComId IS NULL
    </select>
    <!--获取库存最后入库日期  -->
    <select id="getLastInDate" parameterType="java.lang.String"   resultType="java.lang.String">
	SELECT MAX(sir.stockDate) FROM stockInOutRecord sir WHERE EXISTS (
	SELECT td.serialNum FROM takeDelivery td WHERE EXISTS (
	SELECT serialNum FROM
	(
	SELECT d.serialNum FROM delivery d
	LEFT JOIN orderMateriel om ON
	om.orderSerial = d.orderSerial
	WHERE om.materielSerial =
	#{serialNum,jdbcType=VARCHAR}
	) tb
	WHERE td.deliverSerial = tb.serialNum
	)
	)
    </select>
    <!--获取库存最后出库日期  -->
    <select id="getLastOutDate"  parameterType="java.lang.String"   resultType="java.lang.String">
	SELECT MAX(sir.stockDate) FROM stockInOutRecord sir WHERE EXISTS (
	SELECT d.serialNum FROM delivery d WHERE EXISTS (
	SELECT serialNum FROM
	(SELECT d.serialNum FROM delivery d
	LEFT JOIN orderMateriel om ON
	om.orderSerial = d.orderSerial
	WHERE om.materielSerial =
	#{serialNum,jdbcType=VARCHAR}
	) tb
	WHERE
	d.serialNum = tb.serialNum
	)
	)
	
    </select>
     <!--获取累计出库数量 -->
    <select id="countOutAmount" parameterType="java.lang.String"   resultType="java.lang.String">
    SELECT  SUM( IFNULL(dm.stockCount,0)  )  from deliveryMateriel  dm where
	EXISTS (select serialNum from
	orderMateriel om  where om.materielSerial= #{serialNum,jdbcType=VARCHAR} and dm.orderMaterielSerial=om.serialNum)
    
    
    </select>
     <!--获取累计入库数量   -->
     <select id="countInAmount"  parameterType="java.lang.String"   resultType="java.lang.String">
	select SUM( IFNULL(dm.stockCount,0) ) from deliveryMateriel dm where
	EXISTS (
	SELECT serialNum FROM (
	SELECT td.serialNum FROM takeDelivery td WHERE EXISTS (
	SELECT serialNum FROM
	(
	SELECT d.serialNum FROM delivery d
	LEFT JOIN
	orderMateriel om ON
	om.orderSerial = d.orderSerial
	WHERE
	om.materielSerial = #{serialNum,jdbcType=VARCHAR}
	) tb
	WHERE
	td.deliverSerial = tb.serialNum
	)
	)temp where temp.serialNum=dm.deliverSerial
	)
     </select>
     <!-- 获取库存出库记录-->
     <select id="getStockOutRecord"  parameterType="java.lang.String"  resultMap="BaseResultMap" >
     select <include refid="Base_Column_List" />
      from stockInOutRecord  sir
  where    EXISTS (SELECT deliverSerial FROM (SELECT  dm.deliverSerial from deliveryMateriel  dm where
	EXISTS (select serialNum from
	orderMateriel om  where om.materielSerial= #{serialNum,jdbcType=VARCHAR} and dm.orderMaterielSerial=om.serialNum))temp  WHERE sir.deliverSerial= temp.deliverSerial)
     </select>
     <!-- 获取库存入库记录-->
     <select id="getStockInRecord"  parameterType="java.lang.String"  resultMap="BaseResultMap" >
     select <include refid="Base_Column_List" />
      from stockInOutRecord  sir
  where    EXISTS (SELECT serialNum FROM (
	SELECT td.serialNum FROM takeDelivery td WHERE EXISTS (
	SELECT serialNum FROM
	(
	SELECT d.serialNum FROM delivery d
	LEFT JOIN
	orderMateriel om ON
	om.orderSerial = d.orderSerial
	WHERE
	om.materielSerial = #{serialNum,jdbcType=VARCHAR}
	) tb
	WHERE
	td.deliverSerial = tb.serialNum
	)
	)temp where temp.serialNum=sir.takeDeliverSerial
	)
     </select>
     <!--获取库存相关的发货流水  -->
     <select id="getRelationDeliverSerial"  parameterType="com.congmai.zhgj.web.model.Stock" resultType="java.lang.String">
   SELECT d.serialNum FROM delivery d
	LEFT JOIN
	orderMateriel om ON
	om.orderSerial = d.orderSerial
	WHERE
	om.materielSerial = #{materielSerial,jdbcType=VARCHAR}
     </select>
      <!--获取库存相关的收货流水  -->
     <select id="getRelationTakeDeliverSerial"  parameterType="com.congmai.zhgj.web.model.Stock" resultType="java.lang.String">
     SELECT  td.serialNum  from  takeDelivery td  where   EXISTS(
     SELECT  serialNum from(SELECT d.serialNum FROM delivery d
	LEFT JOIN
	orderMateriel om ON
	om.orderSerial = d.orderSerial
	WHERE
	om.materielSerial = #{materielSerial,jdbcType=VARCHAR})temp  where  temp.serialNum= td.deliverSerial
     )
     </select>
     
</mapper>